import 'dart:typed_data';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:hand_signature/signature.dart';
import 'package:path_provider/path_provider.dart';
import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'dart:ui' as ui;
import 'dart:io' show Directory, File, Platform;
import 'dart:typed_data';
import 'package:path_provider/path_provider.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';
import 'package:intl/intl.dart'; // Added import for DateFormat
import 'dart:math';
import 'package:permission_handler/permission_handler.dart';

import 'scroll_test.dart';

void main() => runApp(MyApp());

HandSignatureControl control = HandSignatureControl(
  threshold: 0.01,
  smoothRatio: 0.65,
  velocityRange: 2.0,
);

ValueNotifier<String?> svg = ValueNotifier<String?>(null);

ValueNotifier<ByteData?> rawImage = ValueNotifier<ByteData?>(null);

ValueNotifier<ByteData?> rawImageFit = ValueNotifier<ByteData?>(null);

class MyApp extends StatelessWidget {
   MyApp({super.key});

  bool get scrollTest => false;

   Future<void> saveSignatureImage(ByteData? imageData) async {
     if (imageData == null) {
       // Handle the case when there is no signature image.
       return;
     }

     final permissionStatus = await Permission.storage.request();
     if (permissionStatus.isGranted) {
       final directory = await getExternalStorageDirectory();
       if (directory == null) {
         print('Error: Could not get external storage directory.');
         return;
       }

       final file = File('${directory.path}/signature.png');

       try {
         await file.writeAsBytes(imageData.buffer.asUint8List());

         final result = await ImageGallerySaver.saveFile(file.path);

         if (result != null && result['isSuccess']) {
           print('Image saved to gallery.');
         } else {
           print('Failed to save image to gallery.');
         }
       } catch (e) {
         print('Error: $e');
       }
     } else {
       print('Permission denied. Unable to save the image.');
     }
   }

  // This widget is the root of your application.
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Signature',
      theme: ThemeData(
        primarySwatch: Colors.blue,
      ),
      home: Scaffold(
        backgroundColor: Colors.orange,
        body: scrollTest
            ? ScrollTest()
            : SafeArea(
          child: Stack(
            children: <Widget>[
              Column(
                children: <Widget>[
                  Expanded(
                    child: Center(
                      child: AspectRatio(
                        aspectRatio: 2.0,
                        child: Stack(
                          children: <Widget>[
                            Container(
                              constraints: const BoxConstraints.expand(),
                              color: Colors.white,
                              child: HandSignature(
                                control: control,
                                type: SignatureDrawType.shape,
                              ),
                            ),
                            CustomPaint(
                              painter: DebugSignaturePainterCP(
                                control: control,
                                cp: false,
                                cpStart: false,
                                cpEnd: false,
                              ),
                            ),
                          ],
                        ),
                      ),
                    ),
                  ),

                  Row(
                    children: <Widget>[
                      CupertinoButton(
                        onPressed: () {
                          control.clear();
                          rawImageFit.value = null;
                        },
                        child: const Text('clear'),
                      ),

                      CupertinoButton(
                        onPressed: () async {
                          rawImageFit.value = await control.toImage(
                            color: Colors.black,
                            background: Colors.white,
                            fit: true,
                          );
                          // Save the signature image
                          await saveSignatureImage(rawImageFit.value);
                          // Optionally, you can show a confirmation message.
                        },
                        child: Text('Save Signature'),
                      ),

                    ],
                  ),
                  const SizedBox(
                    height: 16.0,
                  ),
                ],
              ),
              const Align(
                alignment: Alignment.bottomRight,
                child: Column(
                  mainAxisSize: MainAxisSize.min,
                  children: <Widget>[
                    //_buildImageView(),
                   // _buildScaledImageView(),
                    //_buildSvgView(),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}