import 'dart:async';
import 'package:bluetooth_thermal_printer/bluetooth_thermal_printer.dart';
import 'package:esc_pos_utils/esc_pos_utils.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:zebrautility/ZebraPrinter.dart';
//import 'package:zebra_printer_plugin/zebra_printer_plugin.dart';

void main() {
  runApp(MyApp());

}
class MyApp extends StatefulWidget {
  @override
  _MyAppState createState() => _MyAppState();
}
class _MyAppState extends State<MyApp> {
  @override
  void initState() {
    super.initState();
  }
  bool connected = false;
  List availableBluetoothDevices = [];
  Future<void> getBluetooth() async {
    final List? bluetooths = await BluetoothThermalPrinter.getBluetooths;
    print("Print $bluetooths");
    setState(() {
      availableBluetoothDevices = bluetooths!;
    });
  }
  Future<void> setConnect(String mac) async {
    print('string ' + mac.toString());
    final String? result = await BluetoothThermalPrinter.connect(mac);
    print("state connected $result");
    if (result == "true") {
      setState(() {
        connected = true;
      });
    }
  }
  /*Future<void> printTicket() async {
    String? isConnected = await BluetoothThermalPrinter.connectionStatus;
    if (isConnected == "true") {
      List<int> zplData = await getTicket();
      final result = await BluetoothThermalPrinter.writeBytes(zplData as String);
      print("Print $result");
    } else {
      //Hadnle Not Connected Senario
    }
  }*/

/*  Future<void> printTicket() async {
    String? isConnected = await BluetoothThermalPrinter.connectionStatus;
    if (isConnected == "true") {
      List<String> zplData = await getTicket();
      final result = await BluetoothThermalPrinter.writeBytes(zplData as String);
      print("Print $result");
    } else {

    }
  }*/



  Future<void> printTicket() async {
    String? isConnected = await BluetoothThermalPrinter.connectionStatus;
    if (isConnected == "true") {
      List<String> zplData = await getTicket();
      String zplString = zplData.join('\n'); // Join ZPL commands with newline characters
      final result = await BluetoothThermalPrinter.writeBytes(zplString);
      print("Print $result");
    } else {
      // Handle the case where the printer is not connected.
    }
  }

  Future<List<String>> getTicket() async {
    List<String> ticketTextList = [];
    CapabilityProfile profile = await CapabilityProfile.load();

    final generator = Generator(PaperSize.mm80, profile);
    /*String ticketText = '''
    ^XA

^FX Top section with logo, name and address.
^CF0,60
^FO50,50^GB100,100,100^FS
^FO75,75^FR^GB100,100,100^FS
^FO93,93^GB40,40,40^FS
^FO220,50^FDIntershipping, Inc.^FS
^CF0,30
^FO220,115^FD1000 Shipping Lane^FS
^FO220,155^FDShelbyville TN 38102^FS
^FO220,195^FDUnited States (USA)^FS
^FO50,250^GB700,3,3^FS

^FX Second section with recipient address and permit information.
^CFA,30
^FO50,300^FDJohn Doe^FS
^FO50,340^FD100 Main Street^FS
^FO50,380^FDSpringfield TN 39021^FS
^FO50,420^FDUnited States (USA)^FS
^CFA,15
^FO600,300^GB150,150,3^FS
^FO638,340^FDPermit^FS
^FO638,390^FD123456^FS
^FO50,500^GB700,3,3^FS

^FX Third section with bar code.
^BY5,2,270
^FO100,550^BC^FD12345678^FS

^FX Fourth section (the two boxes on the bottom).
^FO50,900^GB700,250,3^FS
^FO400,900^GB3,250,3^FS
^CF0,40
^FO100,960^FDCtr. X34B-1^FS
^FO100,1010^FDREF1 F00B47^FS
^FO100,1060^FDREF2 BL4H8^FS
^CF0,190
^FO470,955^FDCA^FS

^XZ
    ''';*/

    String ticketText = "^XA^CF0,60^FO220,50^FDPrinting Success^FS^CF0,30^XZ";

    // Convert the ticket text to a list of strings
    List<String> lines = ticketText.split('\n');

    ticketTextList.addAll(lines);

    return ticketTextList;
  }

 // final String eplCode = 'N\nA60,60,0,3,1,1,N,"Printing Success"\nP1';
  /*Future<void> printEplLabel() async {
    final flutterBlue = FlutterBlue.instance;
    final connectedDevices = await flutterBlue.connectedDevices;

    if (connectedDevices.isNotEmpty) {
      final device = connectedDevices.first; // Assuming the printer is already connected

      // Convert the EPL code to bytes
      final eplBytes = Uint8List.fromList(eplCode.codeUnits);

      try {
        await device.writeCharacteristic(
          eplBytes,
          withoutResponse: true, // EPL commands don't typically require a response
          characteristic: device.characteristics.firstWhere(
                (c) => c.uuid == Guid('0000fff1-0000-1000-8000-00805f9b34fb'), // Use the appropriate characteristic UUID
          ),
        );

        print('EPL label sent to printer');
      } catch (e) {
        print('Error sending EPL label: $e');
      }
    } else {
      print('No connected Bluetooth devices found');
    }
  }*/
  /*Future<List<String>> getTicket() async {
    return [
      '^XA',
      '^FO50,50',
      '^FDHello, World!',
      '^XZ'
    ];
  }*/

  /* Future<List<int>> getTicket() async {
    List<int> bytes = [];
    CapabilityProfile profile = await CapabilityProfile.load();
    final generator = Generator(PaperSize.mm80, profile);

    */

  Future<void> printGraphics() async {
    String? isConnected = await BluetoothThermalPrinter.connectionStatus;
    print("Connection " + isConnected.toString());
    if (isConnected == "true") {
      List<int> zplData = await getGraphicsTicket();
      var result = await BluetoothThermalPrinter.writeBytes(zplData as String);
      result = await BluetoothThermalPrinter.writeText("");
      print("Print $result");
    } else {
      //Hadnle Not Connected Senario
    }
  }

/*  Future<List<int>> getGraphicsTicket() async {
    List<int> bytes = [];
    CapabilityProfile profile = await CapabilityProfile.load();
    final generator = Generator(PaperSize.mm80, profile);
// Print QR Code using native function
    bytes += generator.qrcode('example.com');
    bytes += generator.hr();
// Print Barcode using native function
    final List<int> barData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 4];
    bytes += generator.barcode(Barcode.upcA(barData));
    bytes += generator.cut();
    return bytes;
  }*/

  Future<List<int>> getGraphicsTicket() async {
    List<int> bytes = [];
    CapabilityProfile profile = await CapabilityProfile.load();
    final generator = Generator(PaperSize.mm80, profile);

    // Create a sentence to print
    String sentence = '''
      ^XA^CF0,60^FO50,50^GB100,100,100^FS^FO75,75^FR^GB100,100,100^FS^FO93,93^GB40,40,40^FS^FO220,50^FDUsisTech^FS^CF0,30^FO50,250^GB700,3,3^FS^XZ
    ''';

    // Print the sentence using QR code
    bytes += generator.qrcode(sentence);
    bytes += generator.hr();

    // You can also print a barcode or perform other actions as needed

    bytes += generator.cut();
    return bytes;
  }

  /*Future<List<int>> getTicket() async {
    List<int> bytes = [];
    CapabilityProfile profile = await CapabilityProfile.load();
    final generator = Generator(PaperSize.mm80, profile);
    bytes += generator.text(
        "",
        styles: PosStyles(align: PosAlign.center),linesAfter: 1);
    bytes += generator.text(
      "Zebra Printer",
      styles: PosStyles(
          align: PosAlign.center,
          height: PosTextSize.size1,
          width: PosTextSize.size1,
          bold: true
      ),
    );
    bytes += generator.text(
      "(514) 866-8808\n1255 ,\nMontreal, QC H3G 2B1",
      styles: PosStyles(
          align: PosAlign.center,
          height: PosTextSize.size1,
          width: PosTextSize.size1,
          bold: true
      ),
    );
    bytes += generator.text(
        "",
        styles: PosStyles(align: PosAlign.center),linesAfter: 1);
    bytes += generator.row([
      PosColumn(
        text: 'Server: India',
        width: 6,
        styles: PosStyles(
          align: PosAlign.left,
          height: PosTextSize.size1,
          width: PosTextSize.size1,
        ),),
      PosColumn(
          text: "07/09/2023",
          width: 6,
          styles: PosStyles(
            align: PosAlign.right,
            height: PosTextSize.size1,
            width: PosTextSize.size1,
          )),
    ]);
    bytes += generator.row([
      PosColumn(
          text: '1000/1',
          width: 6,
          styles: PosStyles(
            align: PosAlign.left,
            height: PosTextSize.size1,
            width: PosTextSize.size1,
          )),
      PosColumn(
          text: "11:55 AM",
          width: 6,
          styles: PosStyles(
            align: PosAlign.right,
            height: PosTextSize.size1,
            width: PosTextSize.size1,
          )),
    ]);
    bytes += generator.row([
      PosColumn(
          text: 'Guests: 0',
          width: 6,
          styles: PosStyles(
            align: PosAlign.left,
            height: PosTextSize.size1,
            width: PosTextSize.size1,
          )),
      PosColumn(
          text: '',
          width: 6,
          styles: PosStyles(
            align: PosAlign.left,
            height: PosTextSize.size1,
            width: PosTextSize.size1,
          )),
    ]);
    bytes += generator.text('Order Type: Take-Out',
        styles: PosStyles(align: PosAlign.left)
    );
    bytes += generator.row([
      PosColumn(text: "4", width: 1),
      PosColumn(
          text: "Rova Dosa",
          width: 5,
          styles: PosStyles(
            align: PosAlign.left,
          )),
      PosColumn(
          text: "70",
          width: 2,
          styles: PosStyles(
            align: PosAlign.center,
          )),
      PosColumn(text: "1", width: 2, styles: PosStyles(align: PosAlign.center)),
      PosColumn(text: "70", width: 2, styles: PosStyles(align: PosAlign.right)),
    ]);
    bytes += generator.hr();
    bytes += generator.row([
      PosColumn(
          text: 'TOTAL',
          width: 6,
          styles: PosStyles(
            align: PosAlign.left,
            height: PosTextSize.size4,
            width: PosTextSize.size4,
          )),
      PosColumn(
          text: "160",
          width: 6,
          styles: PosStyles(
            align: PosAlign.right,
            height: PosTextSize.size4,
            width: PosTextSize.size4,
          )),
    ]);
    bytes += generator.hr(ch: '=', linesAfter: 1);
// ticket.feed(2);
    bytes += generator.text('Thank you!',
        styles: PosStyles(align: PosAlign.center, bold: true));
    bytes += generator.text("26-11-2020 15:22:45",
        styles: PosStyles(align: PosAlign.center), linesAfter: 1);
    bytes += generator.text(
        'Note: Goods once sold will not be taken back or exchanged.',
        styles: PosStyles(align: PosAlign.center, bold: false));
    bytes += generator.cut();
    return bytes;
  }*/




  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      /*theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.green),
        useMaterial3: true,
      ),*/
      debugShowCheckedModeBanner: false,
      home: Scaffold(
        appBar: AppBar(
          title: const Text('Zebra Printer'),
        ),
        body: Container(
          padding: EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text("Search Paired Bluetooth Printer"),
              TextButton(
                onPressed: () {
                  this.getBluetooth();
                },
                child: Text("Search"),
              ),
              Container(
                height: 200,
                child: ListView.builder(
                  itemCount: availableBluetoothDevices.isNotEmpty
                      ? availableBluetoothDevices.length
                      : 0,
                  itemBuilder: (context, index) {
                    return ListTile(
                      onTap: () {
                        String select = availableBluetoothDevices[index];
                        List list = select.split("#");
                        // String name = list[0];
                        String mac = list[1];
                        this.setConnect(mac);
                      },
                      title: Text('${availableBluetoothDevices[index]}'),
                      subtitle: Text(connected ? "Connected" : "Click to connect"),
                    );
                  },
                ),
              ),
              SizedBox(
                height: 30,
              ),
              TextButton(
                onPressed: this.printGraphics ,
                child: Text("Print"),
              ),
              TextButton(
                onPressed: connected ? this.printTicket : null,
                child: Text("Print Ticket"),
              ),
            ],
          ),
        ),
      ),
    );
  }

}