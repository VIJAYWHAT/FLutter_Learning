import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:zebrautility/ZebraPrinter.dart';
import 'package:zebrautility/Zebrautility.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({Key? key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Zebra Printer App',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.deepPurple),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'Zebra Printer App'),
      debugShowCheckedModeBanner: false,
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({Key? key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

class _MyHomePageState extends State<MyHomePage> {
  late ZebraPrinter zebraPrinter;
  List<DiscoveredPrinter> discoveredPrinters = [];
  bool discoveryInProgress = false;
  String printerStatus = 'Unknown';
  Color printerStatusColor = Colors.black;
  Color statusTextColor = Colors.black;

  @override
  void initState() {
    super.initState();

    // Initialize the ZebraPrinter instance using Zebrautility
    Zebrautility.getPrinterInstance(
      onPrinterFound: onPrinterFound,
      onPrinterDiscoveryDone: onPrinterDiscoveryDone,
      onDiscoveryError: onDiscoveryError,
      onChangePrinterStatus: onChangePrinterStatus,
      onPermissionDenied: onPermissionDenied,
    ).then((printer) {
      setState(() {
        zebraPrinter = printer;
      });
    });
  }

  // Implement your callback functions as needed
  void onPrinterFound(String name, String ipAddress, bool isWifi) {
    setState(() {
      // Create a DiscoveredPrinter object to hold the printer information
      final discoveredPrinter = DiscoveredPrinter(
        name: name,
        ipAddress: ipAddress,
        isWifi: isWifi,
      );

      // Add the discovered printer to the list
      discoveredPrinters.add(discoveredPrinter);
    });
  }

  void onPrinterDiscoveryDone() {
    setState(() {
      discoveryInProgress = false;
    });
  }

  void onDiscoveryError(int errorCode, String errorText) {
    // Show the error message as a Snackbar
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Discovery Error: $errorText'),
        action: SnackBarAction(
          label: 'Retry',
          onPressed: () {
            // Close the current Snackbar
            ScaffoldMessenger.of(context).hideCurrentSnackBar();

            // Update the UI or perform actions based on the error
            setState(() {
              discoveryInProgress = true;
            });

            // Trigger the retry logic
            zebraPrinter.discoveryPrinters();
          },
        ),
      ),
    );

// Optionally, show a separate Snackbar for "Cancel"
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Operation Canceled'),
        action: SnackBarAction(
          label: 'Dismiss',
          onPressed: () {
            // Close the current Snackbar
            ScaffoldMessenger.of(context).hideCurrentSnackBar();
          },
        ),
      ),
    );
  }

  void onChangePrinterStatus(String status, String color) {
    setState(() {
      // Update the printer status and text color in the UI
      printerStatus = status;
      if (color == 'green') {
        statusTextColor = Colors.green;
        printerStatus = 'Connected';
        // Green for good status
      } else if (color == 'red') {
        statusTextColor = Colors.red;
        printerStatus = 'Not Connected';// Red for issues
      } else {
        statusTextColor = Colors.black; // Default color
      }
    });
  }

  void onPermissionDenied() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('The app requires certain permissions to function properly.'),
        action: SnackBarAction(
          label: 'Open Settings',
          onPressed: () {
          },
        ),
      ),
    );

  }
  void printText() {
    // Check if the printer is connected before printing
    if (zebraPrinter.isPrinterConnected()) {
      final textToPrint = '''
      ^XA
      ^FO20,20^FDHello, World!^FS
      ^FO20,50^FDPrinter Testing 2^FS
      ^FO20,80^FDBy Usis Technologies 3^FS
      ^XZ
    ''';
      // Send the text data to the printer for printing
      zebraPrinter.print(textToPrint);
    } else {
      // Handle the case where the printer is not connected
      print('Printer is not connected.');
    }
  }


  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ),
      body: Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: <Widget>[
            ElevatedButton(
              onPressed: () {
                // Trigger printer discovery here
                setState(() {
                  discoveryInProgress = true;
                });
                zebraPrinter.discoveryPrinters();
              },
              child: Text('Discover Printers'),
            ),
            SizedBox(height: 16),
            Text(
              'Printer Status:',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
              ),
            ),
            SizedBox(height: 8),
            Text(
              printerStatus,
              style: TextStyle(
                fontSize: 24,
                color: statusTextColor, // Text color based on status
              ),
            ),
            SizedBox(height: 16),
            discoveryInProgress
                ? CircularProgressIndicator() // Display a loading indicator during discovery
                : Expanded(
              child: ListView.builder(
                itemCount: discoveredPrinters.length,
                itemBuilder: (context, index) {
                  final printer = discoveredPrinters[index];
                  return ListTile(
                    title: Text(printer.name),
                    subtitle: Text(printer.ipAddress),
                    trailing: Icon(printer.isWifi ? Icons.wifi : Icons.lan),
                  );
                },
              ),
            ),
            ElevatedButton(
              onPressed: () {
                // Trigger text printing here
                printText();
              },
              child: Text('Print Text'),
            ),
          ],
        ),
      ),
    );
  }


}

class DiscoveredPrinter {
  final String name;
  final String ipAddress;
  final bool isWifi;

  DiscoveredPrinter({
    required this.name,
    required this.ipAddress,
    required this.isWifi,
  });
}
