import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:syncfusion_flutter_signaturepad/signaturepad.dart';
import 'dart:ui' as ui;
import 'dart:io' show Directory, File, Platform;
import 'dart:typed_data';
import 'package:path_provider/path_provider.dart';
import 'package:image_gallery_saver/image_gallery_saver.dart';
import 'package:intl/intl.dart'; // Added import for DateFormat
import 'dart:math';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Signature Pad',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(seedColor: Colors.black87),
        useMaterial3: true,
      ),
      home: const MyHomePage(title: 'SignaturePad App'),
    );
  }
}

class MyHomePage extends StatefulWidget {
  const MyHomePage({super.key, required this.title});

  final String title;

  @override
  State<MyHomePage> createState() => _MyHomePageState();
}

Future<void> saveImageToDevice(Uint8List imageBytes) async {
  Directory? directory;
  if (Platform.isAndroid) {
    directory = await getExternalStorageDirectory();
  } else {
    return;
  }

  if (directory == null) {
    print('Failed to access external storage directory.');
    return;
  }

  final random = Random();
  final int randomSuffix = random.nextInt(10000);

  final file = File('${directory.path}/Signature_$randomSuffix.png');

  try {
    await file.writeAsBytes(imageBytes);

    final result = await ImageGallerySaver.saveFile(file.path);

    if (result != null && result['isSuccess']) {
      print('Image saved to gallery.');
    } else {
      print('Failed to save image to gallery.');
    }

    print(randomSuffix);
  } catch (e) {
    print('Error: $e');
  }
}

class _MyHomePageState extends State<MyHomePage> {
  final GlobalKey<SfSignaturePadState> _signaturePadStatekey = GlobalKey<SfSignaturePadState>();

  void showSnackBar(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
      ),
    );
  }

  Future<void> drawCurrentTimeOnImage(Uint8List imageBytes) async {
    final now = DateTime.now();
    final formattedTime = DateFormat('yyyy-MM-dd HH:mm:ss').format(now);

    ui.Image image = await _signaturePadStatekey.currentState!.toImage(
      pixelRatio: 2.0,
    );

    final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
    final Uint8List imageBytes = byteData!.buffer.asUint8List(
      byteData.offsetInBytes,
      byteData.lengthInBytes,
    );

    // Create a ByteData object from the Canvas
    final recorder = ui.PictureRecorder();
    final canvas = Canvas(
      recorder,
      Rect.fromPoints(
        Offset(0, 0),
        Offset(image.width.toDouble(), image.height.toDouble()),
      ),
    );

    canvas.drawImage(image, Offset(0, 0), Paint());

    final textPainter = TextPainter(
      text: TextSpan(
        text: formattedTime,
        style: TextStyle(
          color: Colors.black,
          fontSize: 20.0,
        ),
      ),
      textDirection: ui.TextDirection.ltr,
      maxLines: 1,
    );

    textPainter.layout();

    // Calculate the position for the text in the bottom right corner
    final textX = image.width.toDouble() - textPainter.width - 10.0;
    final textY = image.height.toDouble() - textPainter.height - 10.0;

    textPainter.paint(
      canvas,
      Offset(textX, textY),
    );

    final imgByteDataWithTime = await recorder.endRecording().toImage(image.width.toInt(), image.height.toInt());
    final pngBytes = await imgByteDataWithTime.toByteData(format: ui.ImageByteFormat.png);

    if (pngBytes == null) {
      print('Failed to convert image to PNG format.');
      return;
    }

    final imgUint8ListWithTime = Uint8List.sublistView(pngBytes.buffer.asUint8List());

    showSnackBar('Image Saved with Time');
    await saveImageToDevice(imgUint8ListWithTime);
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        body: Center(
          child: Container(
            child: Column(
              children: [
                Padding(
                  padding: EdgeInsets.all(10),
                  child: Container(
                    child: SfSignaturePad(
                      key: _signaturePadStatekey,
                      backgroundColor: Colors.white,
                      strokeColor: Colors.black,
                      minimumStrokeWidth: 1.0,
                      maximumStrokeWidth: 4.0,
                    ),
                    decoration: BoxDecoration(border: Border.all(color: Colors.grey)),
                  ),
                ),
                SizedBox(height: 10),
                ElevatedButton(
                  onPressed: () async {
                    _signaturePadStatekey.currentState!.clear();
                  },
                  child: Text('Clear'),
                ),
                ElevatedButton(
                  onPressed: () async {
                    ui.Image image = await _signaturePadStatekey.currentState!.toImage(
                      pixelRatio: 2.0,
                    );

                    final byteData = await image.toByteData(format: ui.ImageByteFormat.png);
                    final Uint8List imageBytes = byteData!.buffer.asUint8List(
                      byteData.offsetInBytes,
                      byteData.lengthInBytes,
                    );

                    // Show a Snackbar message here
                    showSnackBar('Image Saved with Time');

                    // Draw and save the image with the current time
                    await drawCurrentTimeOnImage(imageBytes);
                  },
                  child: Text('Save As Image'),
                ),


              ],
            ),
          ),
        ),
      ),
    );
  }
}

/*
dependencies:
  flutter:
    sdk: flutter
  syncfusion_flutter_signaturepad: ^19.1.66-beta
  path_provider: ^2.0.2
  open_file: ^3.2.2
  universal_html: ^2.0.8
  permission_handler: ^10.4.3
  image_gallery_saver: ^2.0.3
  image_picker: ^0.8.0
  intl: ^0.18.1
*/